import { Router } from 'express'; import Razorpay from 'razorpay'; import crypto from 'crypto'; import Order from '../models/Order.js';
const r=Router(); const enabled=process.env.PAYMENTS_ENABLED==='true';
function rzp(){ const {RAZORPAY_KEY_ID,RAZORPAY_KEY_SECRET}=process.env; if(!RAZORPAY_KEY_ID||!RAZORPAY_KEY_SECRET) return null; return new Razorpay({key_id:RAZORPAY_KEY_ID,key_secret:RAZORPAY_KEY_SECRET}); }
r.post('/order', async (req,res)=>{ try{ if(!enabled) return res.status(503).json({ok:false,error:'Payments disabled'}); const {orderId}=req.body||{}; const ord=await Order.findById(orderId); if(!ord) return res.status(404).json({ok:false,error:'Order not found'}); const rp=rzp(); if(!rp) return res.status(503).json({ok:false,error:'Gateway keys missing'}); const rpOrder=await rp.orders.create({ amount: Math.round((ord.amounts?.grand||0)*100), currency:'INR', receipt:String(orderId) }); res.json({ok:true,rpOrder}); }catch(e){ res.status(500).json({ok:false,error:e.message}); } });
r.post('/webhook', async (req,res)=>{ if(!enabled) return res.status(503).end(); try{ const secret=process.env.RAZORPAY_WEBHOOK_SECRET; const body=JSON.stringify(req.body); const signature=req.headers['x-razorpay-signature']; const expected=crypto.createHmac('sha256',secret).update(body).digest('hex'); const valid=signature===expected; if(!valid) return res.status(400).json({ok:false,error:'Bad signature'}); const receipt=req.body?.payload?.order?.entity?.receipt; if(receipt){ const ord=await Order.findById(receipt); if(ord){ ord.status='paid'; ord.payment={provider:'razorpay',raw:req.body,signatureValid:true}; await ord.save(); } } res.json({ok:true}); }catch(e){ res.status(500).json({ok:false,error:e.message}); } });
export default r;
