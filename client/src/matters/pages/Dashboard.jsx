import { useEffect, useMemo, useRef, useState } from "react"
import { Menu, PanelLeftClose, PanelLeftOpen, RefreshCcw } from "lucide-react"
import Sidebar from "../components/Sidebar"
import Milestones from "../components/Milestones"
import { BudgetCard } from "../components/LeftColumn"
import { useApi } from "../lib/ctx"


const formatCurrency = (amount, currency = "USD") => {

  if (amount === undefined || amount === null) return "-"

  try {

    return new Intl.NumberFormat(undefined, {

      style: "currency",

      currency,

      maximumFractionDigits: 0,

    }).format(amount)

  } catch {

    return `${currency} ${Number(amount).toLocaleString()}`

  }

}



const formatDate = (value) => {

  if (!value) return "-"

  const date = new Date(value)

  return date.toLocaleDateString(undefined, {

    month: "short",

    day: "numeric",

    year: "numeric",

  })

}



function WeatherCard({ weather, onRefresh, loading }) {
  if (!weather) {
    return (
      <div className="card space-y-3 p-4">
        <div className="flex items-center justify-between">

          <div>

            <div className="text-xs uppercase tracking-wide text-textMuted">

              Weather & AI Insight

            </div>

            <div className="text-sm text-textMuted">

              Connect an OpenWeatherMap API key to see live data.

            </div>

          </div>

          <button

            onClick={onRefresh}

            className="rounded-full border border-border px-3 py-1 text-xs text-textMuted transition hover:bg-surfaceSoft"

          >

            Check now

          </button>

        </div>

        <div className="rounded-xl border border-dashed border-border px-3 py-6 text-center text-sm text-textMuted">

          Provide `OPENWEATHER_API_KEY` and `GEMINI_API_KEY` in the backend environment to activate the weather assistant.

        </div>

      </div>

    )

  }



  return (

    <div className="card space-y-3 p-4">

      <div className="flex items-center justify-between">

        <div>

          <div className="text-xs uppercase tracking-wide text-textMuted">Weather Insight</div>

          <div className="text-sm text-textMuted">

            {weather.location} | {formatDate(weather.retrieved_at)}

          </div>

        </div>

        <button

          onClick={onRefresh}

          disabled={loading}

          className="rounded-full border border-border px-3 py-1 text-xs text-textMuted transition hover:bg-surfaceSoft disabled:cursor-not-allowed disabled:opacity-60"

        >

          {loading ? "Refreshing..." : "Refresh"}

        </button>

      </div>

      <div className="rounded-2xl border border-border bg-gradient-to-br from-blue-500/20 via-blue-500/10 to-transparent p-4 text-sm">

        <div className="flex items-start justify-between">

          <div>

            <div className="text-4xl font-bold text-textPrimary">

              {Math.round(weather.temperature)}

              <span className="text-lg align-top">°{weather.units === "imperial" ? "F" : "C"}</span>

            </div>

            <div className="text-sm text-textMuted">{weather.conditions}</div>

          </div>

          <div className="text-right text-[11px] text-textMuted">

            <div>Humidity {weather.humidity}%</div>

            <div>

              Wind {weather.wind_speed.toFixed(1)} {weather.wind_units}

            </div>

          </div>

        </div>

        <div className="mt-3 rounded-xl border border-border bg-surfaceSoft/80 p-3 text-sm leading-relaxed text-textPrimary">

          {weather.insight}

        </div>

        {weather.ai_model && (

          <div className="mt-2 text-[10px] uppercase tracking-wide text-textMuted">

            Insight generated by {weather.ai_model}

          </div>

        )}

      </div>

    </div>

  )
}

function WeatherInsightTile({ weather, onRefresh, loading }) {
  const baseClasses =
    "relative flex h-full min-h-[180px] flex-col justify-between overflow-hidden rounded-2xl border border-transparent p-5 text-white shadow-card";
  const gradientStyle = {
    backgroundImage: "linear-gradient(135deg, #65c7f7 0%, #0052d4 100%)",
  };

  if (!weather) {
    return (
      <div className={baseClasses} style={gradientStyle}>
        <div>
          <div className="text-xs uppercase tracking-wide text-white/70">Weather Insight</div>
          <div className="mt-1 text-lg font-semibold">No data connected</div>
          <p className="mt-2 text-sm text-white/80">
            Add weather credentials in the Matters backend to surface live recommendations.
          </p>
        </div>
        <button
          type="button"
          onClick={onRefresh}
          className="self-start rounded-full border border-white/40 bg-white/10 px-4 py-2 text-xs font-semibold uppercase tracking-wide transition hover:bg-white/20"
        >
          Connect feed
        </button>
      </div>
    );
  }

  const unitLabel = weather.units === "imperial" ? "°F" : "°C";
  const retrievedLabel = weather.retrieved_at ? formatDate(weather.retrieved_at) : "Just now";

  return (
    <div className={baseClasses} style={gradientStyle}>
      <div className="flex items-start justify-between gap-3">
        <div>
          <div className="text-xs uppercase tracking-wide text-white/70">Weather Insight</div>
          <div className="mt-1 text-[13px] text-white/80">{weather.location}</div>
        </div>
        <button
          type="button"
          onClick={onRefresh}
          disabled={loading}
          className="rounded-full border border-white/40 bg-white/10 px-3 py-1 text-[11px] font-medium uppercase tracking-wide text-white transition hover:bg-white/20 disabled:opacity-60"
        >
          {loading ? "Updating..." : "Refresh"}
        </button>
      </div>
      <div className="mt-6 flex items-end justify-between">
        <div>
          <div className="text-5xl font-semibold leading-none">
            {Math.round(weather.temperature)}
            <span className="ml-1 text-xl align-top">{unitLabel}</span>
          </div>
          <div className="mt-2 text-sm text-white/80">{weather.conditions}</div>
        </div>
        <div className="rounded-2xl border border-white/30 bg-white/10 px-4 py-3 text-right text-[12px] leading-tight">
          <div>Humidity {weather.humidity}%</div>
          <div>
            Wind {weather.wind_speed.toFixed(1)} {weather.wind_units}
          </div>
          <div className="mt-1 text-white/70">Updated {retrievedLabel}</div>
        </div>
      </div>
      <div className="mt-6 rounded-2xl border border-white/20 bg-white/15 px-4 py-3 text-sm leading-relaxed">
        {weather.insight}
      </div>
    </div>
  );
}

function StatusSummaryCard({ kpis = {}, incidents = [], risks = [] }) {
  const openIncidents = incidents.filter((incident) => !incident.resolved_at).length;
  const activeRisks = risks.filter((risk) => (risk.status || "").toLowerCase() !== "closed").length;

  const formatPercent = (value) =>
    value === null || value === undefined ? "—" : `${Math.round(Number(value))}%`;
  const formatMinutes = (value) =>
    value === null || value === undefined ? "—" : `${Math.round(Number(value))} min`;

  const tiles = [
    { label: "Uptime", value: formatPercent(kpis.uptime_pct), hint: "Last window" },
    { label: "Avg MTTR", value: formatMinutes(kpis.avg_mttr_min), hint: "Recovery" },
    { label: "RTO Met", value: formatPercent(kpis.rto_ok_pct), hint: "Target 95%" },
    { label: "RPO Met", value: formatPercent(kpis.rpo_ok_pct), hint: "Target 95%" },
    { label: "Open Incidents", value: openIncidents, hint: "Requiring attention" },
    { label: "Active Risks", value: activeRisks, hint: "Monitored" },
  ];

  return (
    <div className="card h-full rounded-2xl border border-border px-4 py-5">
      <div className="flex items-center justify-between">
        <div>
          <div className="text-xs uppercase tracking-wide text-textMuted">STATUS</div>
          <div className="text-sm text-textMuted">Operational pulse for the current mode.</div>
        </div>
      </div>
      <div className="mt-4 grid grid-cols-2 gap-2 sm:grid-cols-3">
        {tiles.map((tile) => (
          <div
            key={tile.label}
            className="rounded-xl border border-border bg-surfaceSoft/80 px-3 py-3 text-center text-sm"
          >
            <div className="text-lg font-semibold text-textPrimary">{tile.value}</div>
            <div className="text-[11px] uppercase tracking-wide text-textMuted">{tile.label}</div>
            <div className="mt-1 text-[10px] text-textMuted">{tile.hint}</div>
          </div>
        ))}
      </div>
    </div>
  );
}

function InventoryUsageCard({ inventory = [], activeMode }) {
  const items = useMemo(() => {
    const byMode = inventory.filter((item) => item.mode === activeMode);
    const fallback = inventory.filter((item) => item.mode === "construction");
    const source = byMode.length ? byMode : fallback.length ? fallback : inventory;
    return source.slice(0, 4);
  }, [activeMode, inventory]);

  const rows = items.map((item, index) => {
    const total = Number(item.quantity) || 0;
    const baseCode = (item.id || item.name || `${index}`)
      .split("")
      .reduce((acc, char) => acc + char.charCodeAt(0), 0);
    const ratio = ((baseCode % 35) + 45) / 100;
    const used = total > 0 ? Math.min(total, Math.max(total > 1 ? 1 : 0, Math.round(total * ratio))) : 0;
    const percent = total > 0 ? Math.round((used / total) * 100) : 0;
    return { item, total, used, percent };
  });

  return (
    <div className="card h-full rounded-2xl border border-border p-5">
      <div className="flex items-center justify-between">
        <div>
          <div className="text-xs uppercase tracking-wide text-textMuted">INVENTORY</div>
          <div className="text-sm text-textMuted">
            Consumption snapshot across active construction workstreams.
          </div>
        </div>
      </div>
      {rows.length ? (
        <div className="mt-4 space-y-3">
          {rows.map(({ item, used, total, percent }) => (
            <div key={item.id || item.name} className="rounded-xl border border-border px-4 py-3">
              <div className="flex items-center justify-between gap-3 text-sm">
                <div className="font-semibold text-textPrimary">{item.name}</div>
                <div className="text-[11px] uppercase tracking-wide text-textMuted">
                  {used}/{total} {item.unit || "units"} used
                </div>
              </div>
              <div className="mt-3 h-2 w-full overflow-hidden rounded-full bg-border/60">
                <div
                  className="h-full rounded-full bg-accent transition-all"
                  style={{ width: `${percent}%` }}
                  aria-label={`${item.name} usage ${percent}%`}
                />
              </div>
              <div className="mt-2 flex items-center justify-between text-[11px] text-textMuted">
                <span>{item.location || "Location pending"}</span>
                <span className="font-medium text-textPrimary">{item.status || "Tracked"}</span>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="mt-6 rounded-xl border border-dashed border-border px-4 py-8 text-center text-sm text-textMuted">
          No inventory captured for this mode yet. Add records to view usage progress.
        </div>
      )}
    </div>
  );
}

function deriveInsightAction(insight) {
  if (!insight) return "Coordinate owners and capture progress before the shift handover.";
  if (insight.tags?.includes("staffing")) {
    return "Confirm crew rotations with operations and log their readiness in the control sheet.";
  }
  if (insight.tags?.includes("supply")) {
    return "Align procurement follow-ups with logistics and push supplier confirmations before transport begins.";
  }
  if (insight.tags?.includes("approvals")) {
    return "Schedule a quick review with the client sponsor and circulate updated mockups for sign-off.";
  }
  return "Coordinate owners and capture progress before the shift handover.";
}

function AiAnalystInsightsBoard({ insights = [] }) {
  const items = insights.slice(0, 4);

  return (
    <div className="card space-y-4 rounded-2xl border border-border p-5">
      <div className="flex items-center justify-between">
        <div>
          <div className="text-xs uppercase tracking-wide text-textMuted">AI AND ANALYST INSIGHTS</div>
          <div className="text-sm text-textMuted">
            Combined observations with immediate action guidance.
          </div>
        </div>
      </div>
      {items.length ? (
        <div className="grid gap-3 md:grid-cols-2">
          {items.map((item) => (
            <div
              key={item.id}
              className="flex flex-col rounded-2xl border border-border bg-surfaceSoft/70 p-4 text-sm"
            >
              <div className="text-[11px] uppercase tracking-wide text-textMuted">{item.source}</div>
              <div className="mt-1 text-base font-semibold text-textPrimary">{item.title}</div>
              <p className="mt-2 text-[13px] leading-relaxed text-textMuted">{item.summary}</p>
              <div className="mt-3 rounded-xl border border-accent/30 bg-accent/10 px-3 py-2">
                <div className="text-[10px] uppercase tracking-wide text-accent">Immediate focus</div>
                <div className="mt-1 text-sm text-textPrimary">{deriveInsightAction(item)}</div>
              </div>
              <div className="mt-3 flex flex-wrap gap-1 text-[10px] uppercase tracking-wide text-textMuted">
                {item.tags?.map((tag) => (
                  <span key={tag} className="rounded-full border border-border px-2 py-0.5">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="rounded-xl border border-dashed border-border px-4 py-8 text-center text-sm text-textMuted">
          Capture analyst and AI insights to see recommendations surfaced here.
        </div>
      )}
    </div>
  );
}

function GalleryPreview({ gallery = [] }) {
  const items = gallery.slice(0, 4)
  return (
    <div className="card space-y-3 p-4">

      <div className="flex items-center justify-between">

        <div>

          <div className="text-xs uppercase tracking-wide text-textMuted">Latest Gallery</div>

          <div className="text-sm text-textMuted">

            Recent uploads tailored to this mode.

          </div>

        </div>

      </div>

      {items.length ? (

        <div className="grid grid-cols-2 gap-3 sm:grid-cols-4">

          {items.map((item) => (

            <figure

              key={item.id}

              className="group relative overflow-hidden rounded-2xl border border-border"

            >

              <img

                src={item.thumbnail_url || item.image_url}

                alt={item.title}

                className="h-32 w-full object-cover transition group-hover:scale-105"

              />

              <figcaption className="absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent px-3 py-2 text-[11px] text-white">

                <div className="font-semibold">{item.title}</div>

                <div className="truncate">{item.uploaded_by}</div>

              </figcaption>

            </figure>

          ))}

        </div>

      ) : (

        <div className="rounded-xl border border-dashed border-border px-3 py-6 text-center text-sm text-textMuted">

          No gallery assets yet for this mode.

        </div>

      )}

    </div>

  )

}



function InsightsRail({ insights = [] }) {

  const items = insights.slice(0, 4)

  return (

    <div className="card space-y-3 p-4">

      <div className="flex items-center justify-between">

        <div>

          <div className="text-xs uppercase tracking-wide text-textMuted">AI & Analyst Insights</div>

          <div className="text-sm text-textMuted">

            High-signal notes surfaced for this mode.

          </div>

        </div>

      </div>

      {items.length ? (

        <div className="grid grid-cols-1 gap-3 md:grid-cols-2">

          {items.map((item) => (

            <div

              key={item.id}

              className="rounded-2xl border border-border bg-surfaceSoft/80 p-3 text-sm"

            >

              <div className="text-xs uppercase tracking-wide text-textMuted">

                {item.source}

              </div>

              <div className="mt-1 text-base font-semibold text-textPrimary">

                {item.title}

              </div>

              <p className="mt-1 text-[13px] text-textMuted">{item.summary}</p>

              <div className="mt-2 flex flex-wrap gap-1 text-[10px] uppercase tracking-wide text-textMuted">

                {item.tags?.map((tag) => (

                  <span

                    key={tag}

                    className="rounded-full border border-border px-2 py-0.5"

                  >

                    {tag}

                  </span>

                ))}

              </div>

            </div>

          ))}

        </div>

      ) : (

        <div className="rounded-xl border border-dashed border-border px-3 py-6 text-center text-sm text-textMuted">

          No insight records yet-add them through the `/insights` endpoint.

        </div>

      )}

    </div>

  )

}



function InventoryTable({ inventory = [] }) {

  return (

    <div className="card overflow-hidden">

      <div className="flex items-center justify-between border-b border-border px-4 py-3">

        <div>

          <div className="text-xs uppercase tracking-wide text-textMuted">Inventory</div>

          <div className="text-sm text-textMuted">

            Materials, equipment, and design assets tied to this mode.

          </div>

        </div>

      </div>

      {inventory.length ? (

        <div className="overflow-x-auto">

          <table className="min-w-full text-left text-sm">

            <thead className="bg-surfaceSoft text-xs uppercase tracking-wide text-textMuted">

              <tr>

                <th className="px-4 py-3">Name</th>

                <th className="px-4 py-3">Category</th>

                <th className="px-4 py-3">Quantity</th>

                <th className="px-4 py-3">Location</th>

                <th className="px-4 py-3">Status</th>

                <th className="px-4 py-3">Supplier</th>

                <th className="px-4 py-3">Notes</th>

              </tr>

            </thead>

            <tbody>

              {inventory.map((item) => (

                <tr

                  key={item.id}

                  className="border-t border-border/60 text-sm text-textPrimary hover:bg-surfaceSoft/60"

                >

                  <td className="px-4 py-3 font-medium">{item.name}</td>

                  <td className="px-4 py-3 text-textMuted">{item.category}</td>

                  <td className="px-4 py-3 text-textMuted">

                    {item.quantity} {item.unit}

                  </td>

                  <td className="px-4 py-3 text-textMuted">{item.location || "-"}</td>

                  <td className="px-4 py-3 text-textMuted">{item.status}</td>

                  <td className="px-4 py-3 text-textMuted">{item.supplier || "-"}</td>

                  <td className="px-4 py-3 text-textMuted">

                    {item.notes || "-"}

                  </td>

                </tr>

              ))}

            </tbody>

          </table>

        </div>

      ) : (

        <div className="px-4 py-10 text-center text-sm text-textMuted">

          No inventory records yet for this mode.

        </div>

      )}

    </div>

  )

}



function FinanceTable({ finance = [] }) {

  return (

    <div className="card overflow-hidden">

      <div className="flex items-center justify-between border-b border-border px-4 py-3">

        <div>

          <div className="text-xs uppercase tracking-wide text-textMuted">Finance</div>

          <div className="text-sm text-textMuted">

            Budget, expenses, invoices, and forecasts.

          </div>

        </div>

      </div>

      {finance.length ? (

        <div className="overflow-x-auto">

          <table className="min-w-full text-left text-sm">

            <thead className="bg-surfaceSoft text-xs uppercase tracking-wide text-textMuted">

              <tr>

                <th className="px-4 py-3">Type</th>

                <th className="px-4 py-3">Category</th>

                <th className="px-4 py-3">Amount</th>

                <th className="px-4 py-3">Period</th>

                <th className="px-4 py-3">Status</th>

                <th className="px-4 py-3">Due</th>

                <th className="px-4 py-3">Notes</th>

              </tr>

            </thead>

            <tbody>

              {finance.map((item) => (

                <tr

                  key={item.id}

                  className="border-t border-border/60 text-sm text-textPrimary hover:bg-surfaceSoft/60"

                >

                  <td className="px-4 py-3 font-medium capitalize">{item.record_type}</td>

                  <td className="px-4 py-3 text-textMuted">{item.category}</td>

                  <td className="px-4 py-3 text-textMuted">

                    {formatCurrency(item.amount, item.currency)}

                  </td>

                  <td className="px-4 py-3 text-textMuted">{item.period || "-"}</td>

                  <td className="px-4 py-3 text-textMuted">{item.status || "-"}</td>

                  <td className="px-4 py-3 text-textMuted">{formatDate(item.due_date)}</td>

                  <td className="px-4 py-3 text-textMuted">

                    {item.notes || "-"}

                  </td>

                </tr>

              ))}

            </tbody>

          </table>

        </div>

      ) : (

        <div className="px-4 py-10 text-center text-sm text-textMuted">

          No finance records yet for this mode.

        </div>

      )}

    </div>

  )

}



function GalleryGrid({ gallery = [] }) {

  return (

    <div className="card space-y-3 p-4">

      <div className="flex items-center justify-between">

        <div>

          <div className="text-xs uppercase tracking-wide text-textMuted">Gallery</div>

          <div className="text-sm text-textMuted">

            Uploads are stored with MongoDB metadata.

          </div>

        </div>

      </div>

      {gallery.length ? (

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">

          {gallery.map((item) => (

            <article

              key={item.id}

              className="group overflow-hidden rounded-2xl border border-border transition hover:border-accent"

            >

              <div className="relative h-48">

                <img

                  src={item.image_url}

                  alt={item.title}

                  className="h-full w-full object-cover transition group-hover:scale-105"

                />

              </div>

              <div className="space-y-1 px-4 py-3 text-sm">

                <div className="font-semibold text-textPrimary">{item.title}</div>

                <div className="text-[12px] text-textMuted">{item.description || "-"}</div>

                <div className="text-[11px] text-textMuted">

                  Uploaded by {item.uploaded_by} | {formatDate(item.uploaded_at)}

                </div>

                <div className="flex flex-wrap gap-1 text-[10px] uppercase tracking-wide text-textMuted">

                  {item.tags?.map((tag) => (

                    <span key={tag} className="rounded-full border border-border px-2 py-0.5">

                      {tag}

                    </span>

                  ))}

                </div>

              </div>

            </article>

          ))}

        </div>

      ) : (

        <div className="rounded-xl border border-dashed border-border px-3 py-6 text-center text-sm text-textMuted">

          No captured imagery or design assets uploaded yet.

        </div>

      )}

    </div>

  )

}



function ChatPanel({ activeMode }) {
  const [messages, setMessages] = useState([
    {
      role: "assistant",
      persona: "architect",
      content:
        "Hi! I'm your Builtattic associate. Ask about design, structural strategies, site logistics or compliance and I'll route it to the right mindset.",
    },
  ]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [error, setError] = useState("");
  const [expanded, setExpanded] = useState(false);
  const scrollRef = useRef(null);

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [messages, isTyping]);

  useEffect(() => {
    if (!expanded) return undefined;
    const previous = document.body.style.overflow;
    document.body.style.overflow = "hidden";
    return () => {
      document.body.style.overflow = previous;
    };
  }, [expanded]);

  const personaLabel = (persona) =>
    persona === "civil engineer" ? "Builtattic Civil Engineer" : "Builtattic Architect";

  const handleSend = async () => {
    const trimmed = input.trim();
    if (!trimmed || isTyping) return;
    const userMessage = { role: "user", content: trimmed };
    const historySnapshot = [...messages, userMessage];
    setMessages(historySnapshot);
    setInput("");
    setIsTyping(true);
    setError("");
    try {
      const response = await fetch("/api/matters/assistant", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          mode: activeMode,
          messages: historySnapshot.map(({ role, content }) => ({ role, content })),
        }),
      });
      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.error || "Assistant is unavailable right now.");
      }
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          persona: data.persona || "architect",
          content: data.reply,
        },
      ]);
    } catch (err) {
      console.error(err);
      setError(err.message || "Failed to reach the assistant.");
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          persona: "architect",
          content:
            "I could not contact the Gemini assistant. Please try again in a moment or reach out to support.",
        },
      ]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyDown = (event) => {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();
      handleSend();
    }
  };

  const panelContent = (
    <div className={`flex flex-1 flex-col bg-surfaceSoft/30 ${expanded ? "min-h-0" : "h-[360px]"}`}>
      <div ref={scrollRef} className="flex-1 space-y-3 overflow-y-auto px-4 py-3">
        {messages.map((entry, index) => {
          const isAssistant = entry.role === "assistant";
          return (
            <div
              key={`${entry.role}-${index}-${entry.content.slice(0, 8)}`}
              className={`max-w-[86%] rounded-2xl px-4 py-3 text-sm shadow-sm ${
                isAssistant
                  ? "bg-white/70 backdrop-blur border border-border"
                  : "ml-auto bg-slate-900 text-white"
              }`}
            >
              <div className="text-[11px] font-semibold uppercase tracking-wide opacity-75">
                {isAssistant ? personaLabel(entry.persona) : "You"}
              </div>
              <p className="mt-1 whitespace-pre-wrap leading-relaxed">{entry.content}</p>
            </div>
          );
        })}
        {isTyping && (
          <div className="max-w-[60%] rounded-2xl border border-border bg-white/80 px-4 py-3 text-[12px] text-textMuted shadow-sm">
            Drafting a response...
          </div>
        )}
      </div>
      <div className="border-t border-border bg-white/70 backdrop-blur px-3 py-2">
        <textarea
          value={input}
          onChange={(event) => setInput(event.target.value)}
          onKeyDown={handleKeyDown}
          placeholder="Ask about structural loads, material choices, workflows..."
          rows={expanded ? 4 : 2}
          className="w-full resize-none rounded-lg border border-border/70 bg-white/80 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-accent/50"
        />
        <div className="mt-2 flex flex-wrap items-center gap-2">
          <button
            onClick={handleSend}
            disabled={!input.trim() || isTyping}
            className="rounded-lg bg-accent px-3 py-2 text-sm font-medium text-white transition hover:bg-accent/90 disabled:cursor-not-allowed disabled:opacity-60"
          >
            Send
          </button>
          {error && <span className="text-[11px] text-red-600">{error}</span>}
        </div>
      </div>
    </div>
  );

  if (expanded) {
    return (
      <div className="fixed inset-4 z-[70] flex flex-col rounded-3xl border border-border bg-base/90 backdrop-blur-2xl shadow-2xl">
        <div className="flex items-center justify-between border-b border-border/70 px-6 py-4">
          <div>
            <div className="text-xs uppercase tracking-wide text-textMuted">Associate Chat</div>
            <div className="text-sm text-textMuted">
              Gemini-powered guidance for architecture and civil queries.
            </div>
          </div>
          <button
            type="button"
            onClick={() => setExpanded(false)}
            className="rounded-md border border-border px-3 py-1 text-xs font-medium text-textMuted hover:bg-surfaceSoft"
          >
            Exit fullscreen
          </button>
        </div>
        {panelContent}
      </div>
    );
  }

  return (
    <div className="card h-full overflow-hidden lg:min-h-[260px]">
      <div className="flex items-center justify-between border-b border-border px-4 py-3">
        <div>
          <div className="text-xs uppercase tracking-wide text-textMuted">Associate Chat</div>
          <div className="text-sm text-textMuted">
            Gemini-powered guidance for architecture and civil queries.
          </div>
        </div>
        <button
          type="button"
          onClick={() => setExpanded(true)}
          className="rounded-md border border-border px-3 py-1 text-xs font-medium text-textMuted hover:bg-surfaceSoft"
        >
          Expand
        </button>
      </div>
      {panelContent}
    </div>
  );
}
function InsightsBoard({ insights = [] }) {

  return (

    <div className="card space-y-3 p-4">

      <div className="flex items-center justify-between">

        <div>

          <div className="text-xs uppercase tracking-wide text-textMuted">Insights</div>

          <div className="text-sm text-textMuted">

            Deeper view of the AI and analyst feed.

          </div>

        </div>

      </div>

      {insights.length ? (

        <div className="space-y-3">

          {insights.map((item) => (

            <article

              key={item.id}

              className="rounded-2xl border border-border bg-surfaceSoft/60 p-4 text-sm"

            >

              <div className="flex flex-col gap-1 md:flex-row md:items-baseline md:justify-between">

                <div className="text-xs uppercase tracking-wide text-textMuted">

                  {item.source}

                </div>

                <div className="text-[11px] text-textMuted">

                  Logged {formatDate(item.created_at)}

                </div>

              </div>

              <div className="mt-2 text-lg font-semibold text-textPrimary">

                {item.title}

              </div>

              <p className="mt-2 text-[13px] text-textMuted">{item.summary}</p>

              <div className="mt-3 flex flex-wrap gap-1 text-[10px] uppercase tracking-wide text-textMuted">

                {item.tags?.map((tag) => (

                  <span key={tag} className="rounded-full border border-border px-2 py-0.5">

                    {tag}

                  </span>

                ))}

              </div>

            </article>

          ))}

        </div>

      ) : (

        <div className="rounded-xl border border-dashed border-border px-3 py-6 text-center text-sm text-textMuted">

          No insights captured yet.

        </div>

      )}

    </div>

  )

}



function SettingsPanel() {

  return (

    <div className="card space-y-4 p-4 text-sm text-textMuted">

      <div>

        <div className="text-xs uppercase tracking-wide text-textMuted">Environment Keys</div>

        <p className="mt-2">

          Configure these variables for full functionality:

        </p>

        <ul className="mt-2 list-disc space-y-1 pl-5 text-textPrimary/80">

          <li>

            <code>OPENWEATHER_API_KEY</code> - live weather feed.

          </li>

          <li>

            <code>GEMINI_API_KEY</code> - Google Gemini insights (model defaults to <code>gemini-1.5-flash</code>).

          </li>

          <li>

            <code>CHAT_EMBED_URL</code> - embed Matrix/Element, Rocket.Chat, or another open-source chat UI.

          </li>

          <li>

            <code>MONGO_URL</code> / <code>MONGO_DB</code> - MongoDB connection details.

          </li>

        </ul>

      </div>

      <div>

        <div className="text-xs uppercase tracking-wide text-textMuted">Mode Extensibility</div>

        <p className="mt-2">

          Add documents to the <code>modes</code> collection to introduce new operational modes. Each mode is referenced across inventory, finance, gallery, and insights without additional schema updates.

        </p>

      </div>

    </div>

  )

}



export default function Dashboard() {
  const {
    activeMode,
    weather,
    inventory,
    finance,
    gallery,
    insights,
    incidents,
    risks,
    kpis,
    loading,
    refreshAll,
    refreshWeather,
    activeSidebar,
  } = useApi() || {}


  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)

  const [sidebarMobileOpen, setSidebarMobileOpen] = useState(false)

  const [isDesktop, setIsDesktop] = useState(() => {

    if (typeof window === "undefined") return false

    return window.matchMedia("(min-width: 1024px)").matches

  })



  useEffect(() => {

    if (typeof window === "undefined") return

    const media = window.matchMedia("(min-width: 1024px)")

    const handler = () => setIsDesktop(media.matches)

    media.addEventListener("change", handler)

    handler()

    return () => media.removeEventListener("change", handler)

  }, [])



  useEffect(() => {

    if (isDesktop) {

      setSidebarMobileOpen(false)

    } else {

      setSidebarCollapsed(false)

    }

  }, [isDesktop])



  const handleSidebarToggle = () => {

    if (isDesktop) {

      setSidebarCollapsed((prev) => !prev)

    } else {

      setSidebarMobileOpen((prev) => !prev)

    }

  }



  const handleRefreshDashboard = () => {

    refreshAll?.(activeMode)

    refreshWeather?.(activeMode)

  }



  const dashboardContent = (
    <div className="space-y-5">
      <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
        <div className="flex items-center gap-2">
          <button
            type="button"
            onClick={handleSidebarToggle}
            className="flex h-10 w-10 items-center justify-center rounded-xl border border-border bg-surfaceSoft text-textPrimary transition hover:bg-surface"
            title={isDesktop ? (sidebarCollapsed ? "Expand sidebar" : "Collapse sidebar") : "Toggle navigation"}
          >
            {isDesktop ? (
              sidebarCollapsed ? (
                <PanelLeftOpen className="h-5 w-5" aria-hidden="true" />
              ) : (
                <PanelLeftClose className="h-5 w-5" aria-hidden="true" />
              )
            ) : (
              <Menu className="h-5 w-5" aria-hidden="true" />
            )}
          </button>
          <div className="text-xs uppercase tracking-wide text-textMuted">
            Viewing <span className="font-semibold text-textPrimary">All systems</span> | All severities
          </div>
        </div>
        <div className="flex flex-wrap items-center gap-2 text-xs text-textMuted">
          <span className="rounded-full border border-border px-3 py-1">Window: Last 90 days</span>
          <button
            type="button"
            onClick={handleRefreshDashboard}
            className="flex items-center gap-2 rounded-full border border-border px-3 py-1 font-medium text-textMuted transition hover:bg-surfaceSoft"
          >
            <RefreshCcw className="h-4 w-4" aria-hidden="true" />
            Sync
          </button>
        </div>
      </div>
      <Milestones />
      <div className="grid gap-4 md:grid-cols-12">
        <div className="md:col-span-12 lg:col-span-4">
          <BudgetCard />
        </div>
        <div className="md:col-span-12 lg:col-span-4">
          <WeatherInsightTile
            weather={weather}
            onRefresh={() => refreshWeather?.(activeMode)}
            loading={loading?.weather}
          />
        </div>
        <div className="md:col-span-12 lg:col-span-4 lg:row-span-2">
          <InventoryUsageCard inventory={inventory} activeMode={activeMode} />
        </div>
        <div className="md:col-span-12 lg:col-span-4">
          <ChatPanel activeMode={activeMode} />
        </div>
        <div className="md:col-span-12 lg:col-span-4">
          <StatusSummaryCard kpis={kpis || {}} incidents={incidents || []} risks={risks || []} />
        </div>
      </div>
      <AiAnalystInsightsBoard insights={insights} />
    </div>
  )


  const contentBySidebar = {

    Dashboard: dashboardContent,

    Inventory: <InventoryTable inventory={inventory} />,

    OrderMaterial: <FinanceTable finance={finance} />,

    DesignDetails: <GalleryGrid gallery={gallery} />,

    FinanceReport: <FinanceTable finance={finance} />,

    History: <InsightsBoard insights={insights} />,

    MyDesign: <GalleryGrid gallery={gallery} />,

  }



  const mainContent = contentBySidebar[activeSidebar || "Dashboard"] || dashboardContent



  return (
    <div className="min-h-screen overflow-x-hidden bg-base text-textPrimary transition-colors duration-300">
      {!isDesktop && sidebarMobileOpen && (
        <div
          className="fixed inset-0 z-30 bg-black/50 lg:hidden"
          onClick={() => setSidebarMobileOpen(false)}
        />
      )}

      <div className="relative mx-auto flex w-full max-w-[1440px] flex-col gap-4 px-4 pb-8 pt-6 sm:px-6 lg:flex-row">
        <Sidebar
          collapsed={isDesktop && sidebarCollapsed}
          mobileOpen={sidebarMobileOpen}
          isDesktop={isDesktop}
          onNavigate={() => setSidebarMobileOpen(false)}
        />

        <main className="flex-1 space-y-5">
          {mainContent}
        </main>
      </div>
    </div>
  )

}









































